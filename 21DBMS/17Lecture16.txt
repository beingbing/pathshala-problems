~~ view serialisability ~~

There are some issues with conflict serialisability that we need to discuss.

    T1      T2
    r(Q)    
            W(Q)
    W(Q)

it's a non-conflict-serialisable schedule, because T2 W can not be interchanged by either of the
statements of T1.

let's see if this is actually a serial schedule or if this schedule is actually valid !!

the issues with the schedule are -
- if T1 happens before T2 then final answer will be what T2 wrote.
- if T2 happens before T1 then T1 reads what T2 wrote.

so, this is not a serial schedule, it neither can be said equivalent to T1->T2 not it can be said
equivalent to T2->T1.

Let's take another example -

    T1      T2      T3
    r(Q)
            w(Q)
    w(Q)
                    w(Q)

so the above schedule too is non-conflict-serialisable as we can't move T2 W either up or down.
but lets see if it is equivalent to one of the serial schedules. Take the below case -

    T1      T2      T3
    r(Q)
    w(Q)
            w(Q)
                    w(Q)

so, we can see that whatever the serial, final value will be what T3 wrote.

and also, what T1 r reads and what the final value is (due to T3 w) is same in both the above Schedules.
That is, they will have the same result at the end. Although they are not conflict serialisable.

which concludes, Conflict serialisability is a stricter check because the above two schedules should
also have been passed but they are not.

so, cases where we have blind writes (T3 and T2 W), Conflict Serialisability is a stricter check. If
we check actual equivalence instead of Conflict Serialisability equivalence.

So, there is another concept of View Serialisability in which, If our actual schedule of transaction (S)
is view equivalent to a serial schedule S', Then S is view serialisable.

View Equivalent Schedules: S and S' are view equivalent if,
- In S, Ti reads the starting value. In S', Ti reads the starting value.
- In S, Ti reads what Tj wrote. In S', Ti reads what Tj wrote.
- In S, Ti wrote the final value. In S', Ti should write the final value.

Checking View Serialisability is an NP-complete problem.

So, we have some approximaxtion algorithms very near to the actual approach to check View Serialisability.
Which is out of scope of our discussion, so now we will move on to the next topic.
