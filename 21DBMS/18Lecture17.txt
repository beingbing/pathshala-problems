~~ recoverable and cascadeless schedules ~~

what can go wrong in a schedule.

- non recoverable schedule

    T1      T2
    r(A)
    w(A)
            r(A)    - can't rollback as it is already committed (durability concept)
            commit
    abort           - it will lead to undo whole transaction


- recoverable schedule: where commit will happen only when it is sure that the transaction happening
before it has committed. (any abort in middle allows you to rollback)

How can we make sure that whatever schedule we make is a recoverable schedule ?

before answering that let's explore one more topic -

- cascading rollback

    T1          T2              T3
    r(A)
    w(A)
    r(B)
                r(A)
                                r(B)
    abort

  rollback    rollback    no need to rollback


    T1          T2          T3
    r(A)
    w(A)
    r(B)
                r(A)
                r(B)
                w(B)
                            r(B)
    abort

  rollback    rollback    rollback

this is called cascading rollback in which because of one transaction getting aborted, if some other
transaction needs to be rollback and because of which third transaction gets rolled back and the effect
continues

so actual reason of not having a recoverable schedule is allowing cascading rollback.

- cascadeless schedule
If Ti wants to read something written by Tj then make sure that Tj has already committed.

so, every cascadeless schedule is by nature a recoverable schedule
