~~ Designing URL Shortener: System Design Part 2 ~~

After completing discussion on DB tier design, Now, let's delve into the design of our backend
servers, focusing on the APIs:

1. shorten(string long-url);
output: shortened-url
- generates unique short url for given long url and insert it into DB.
- we can use MD5 hash but it generates a 128 characters string and we need 7 characters only, so
it is not an ideal candidates.
- Base62 encoding requires a unique number, which can be derived from a timestamp. However, this
can lead to predictable patterns. We can generate a completely random token, but different replicas
can generate same random string, then, we will need to check if generated short url is already
mapped to some other URL in DB or not, if yes then generate new short URL.
- Instead of letting every server have a random number generation ability, we'll use a random token
provided by a key DB. This token service will maintain around 10^9 keys, assigning one for each new
short URL request. It can be supported by a key-generation service that periodically fills the key
DB with new keys.

2. getLongUrl(string short-url);
output: string long-url
- For retrieving long URLs based on short ones, we'll directly query the database.

Note: For load balancing, since both APIs access the DB similarly, a simple round-robin approach
suffices. Weighted round-robin could be considered if server capacities vary significantly.

Since the load varies over month time, we need a dynamic server management system. A monitoring
service (MS) collects workload data from each server. To accommodate this, we'll change our strategy
from round-robin to consistent hashing for load distribution.

Additionally, a cleanup service will periodically remove expired URLs from the database.
