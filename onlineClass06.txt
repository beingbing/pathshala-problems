~~ problem solving - searching - 17/10/2021 ~~

Searching problem 1:
Given two arrays A and B, find the number of pairs (x,y) such that x belongs to A, y belongs to B and
x > y.

#include<bits/stdc++.h>
using namespace std;
// a.size() <=10**5
// b.size() <=10**5
 
int64_t solve(vector<int> &a, vector<int> &b) {
    sort(a.begin(), a.end());
    sort(b.begin(), b.end());
    int i=0,j=-1;
    // a[i] > b[j]
    int ans = 0;
    for(i=0;i<a.size();i++) {
        while(j+1<b.size() && b[j+1]<a[i]) {
            j++;
        }
        ans+=j+1;
    }
    return ans;
}


Searching problem 2:
Given an array of pairs, find the longest increasing subsequence of this array. A pair (x1, y1) > (x2, y2)
iff (x1 > x2) && (y1 > y2).

#include<bits/stdc++.h>
using namespace std;
 
int memo[100000];
 

M1 -

int helper(int i, vector<int> &a) {
    if(i==0) return 1;
    if(memo[i]!=0) return memo[i];
    int ans = 0;
    for(int j=0;j<i;j++)
        if(a[i] > a[j]) ans = max(ans, helper(j,a)+1);
    return memo[i] = ans;
}
 
// [2,1,4,3,7,5,6,8]
int solve(vector<int> &a) {
    helper(a.size()-1,a);
}
 

M2 -
// p = the element p[i] is the end element of the "best" LIS of length i.

constexpr int INF = 1e9; 
int solve2(vector<int> &a) {
    int n=a.size();
    vector<int> p(n+1,INF);
    int lis = 0;
    for(int i=0;i<n;i++) {
        int idx = upper_bound(p.begin()+1 , p.begin()+lis ,a[i]) - p.begin();
        idx--;
        a[idx+1] = min(a[idx+1],a[i]);
        lis = max(idx+1,lis);
    }
    return lis;
}
