~~ word ladder ~~

given a list of words, and given a starting and ending word, transform starting word into ending word
by converting single letter into another letter, but every transfromation should be present in the list.

how to identify that this is a graphs problem ?
- every transfromation is a bidirectional change (that means both states are adjacent nodes).
- smallest distance between source-destination is our answer.

need to take a map to create a graph of strings

bool oneStep(string &a, string &b) {
    if (a.size() != b.size()) return false;
    int cnt = 0;
    for (i{0}; i<a.size(); i++) if (a[i] != b[i]) cnt++;
    return cnt == 1;
}

map<string, int> nodes;
for (i{0}; i<n)
    for (j{0}; j<n)
        if (oneStep(words[i], words[j]))
            adj[nodes[words[i]]].push_back(nodes[words[j]]);
            adj[nodes[words[j]]].push_back(nodes[words[i]]);

after this, run BFS from nodes of source and calculate shortest distance till destination.
TC = O(n^2 * m)
SC = O(n^2)
