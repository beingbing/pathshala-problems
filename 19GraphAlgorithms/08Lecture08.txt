~~ knight tour/walk ~~

given an nxn chessboard, given a knight piece somewhere on a board. find the minimum number of moves
knight need to make to reach given destination.

a single move of knight has (i,j) -> (i+-2, j+-1), (i+-1, j+-2)

struct Cell {
    int row, col, dist;
}

Cell createNode(int row, int col, int dist) {
    Cell c;
    c.row = row;
    c.col = col;
    c.dist = dist;
    return c;
}

bool isValid(Cell c) {
    return c.row >= 0 && c.row < n && c.col >= 0 && c.col < n;
}

    {row, col}
pair<int, int> src, dest;
vector<pair<int, int>> directions = {
    {2, 1}, {2, -1}, {-2, 1}, {-2, -1},
    {1, 2}, {1, -2}, {-1, 2}, {-1, -2}
};
queue<Cell> q;
int visited[n][n];
visited[src.first][src.second] = 1;
q.push(createNode(src.first, src.second, 0));
while (!q.empty()) {
    cell x = q.front();
    q.pop();
    if (x.row == dest.first && x.col == dest.second) print(x.dist), break;
    for (int i{0}; i<direction.size(); i++)
        Cell adj = createNode(x.row + direction[i].first, x.col + direction[i].second, x.dist + 1);
    if (!isValid(adj)) continue;
    if (!visited[adj.row][adj.col]) visited[adj.row][adj.col] = 1, q.push(adj);
}
