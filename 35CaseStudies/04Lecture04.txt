~~ Designing URL Shortener: System Design Part 1 ~~

till now we have concluded these 4 points -
- roughly around 10M users
- 30 req/second
- 12.9GB/month
- 10:1 R/W ratio


client      <--->       frontend server
                                                                                                    DB
                                    --------------->        S1                              -------------------------
                                    |                                                       |       R1              |
                                    |                                                       |                       |
client      ------>     LB      ------------------->        S2      -------------->         |         R2            |
                                    |                                                       |                       |
                                    |                                                       |           R3          |
                                    --------------->        S3                              -------------------------



we will be needing multiple DBs and servers because single DB/server can not handle these many requests in parallel.

If we are doing DB replication then it makes more sense to scatter those replicas geographically, as we are assuming
it to be a global service and not restricted to a particular region. Our DB architecture will be single leader
replication. This is because at DB level we want uniqueness for every URL.
as, we want eventual consistency and low latency, we will do asynchronous updates.
but to avoid SPOF, we can have synchronous updates in a few next leader in line candidate replicas, and then let others
have asynchronous updates.

sharding is not required as a single hard-disk normally stores 1.5TB/10years and normally 2TB hard-disk can be used.

we can use nosql DB and datastore (dynamoDB/raik) DB can be a perfect candidate for it.
