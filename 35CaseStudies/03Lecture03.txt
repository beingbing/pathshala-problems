~~ Designing URL Shortener: Back of The Envelop Calculations ~~

to be able to guess what kind of load we are dealing with while designing the URL shortener.

approximately 100k users in india
if we go global, ~~ 10M users approximately

10M new write requests/month on avg. (globally)

100M read requests/month on avg.

read/write ration ~~ 10:1

ours is a read intensive system

we need to keep all URLs for a year, so, 10M*12 = 120M urls at a time in our system.

if we only consider A-B, a-b, 0-9 characters then we will have 62 characters for each place
now, if we take our url to be 6 characters long then it will generate 60^6 unique urls
which is sufficient for our requirement


HOw much data we are going to produce every month ?
long url -> max limit 1024B
short url -> 13 characters so 13 bytes.
date of creation and expiration. -> unix timestamp is a LL int -> 8 bytes/data
so,
in total 1.29KB data/url
so, in one month 12.9 GB data we are gonnar produce.
which will be 150GB data/year
and 1.5TB data/10year


so, we need a system to clear out expired urls, coz we cant have every query searching among
1.5TB data.

how many requests we will be handling/second ?
100k per 10 hrs. so around 3 requests/second for write
and 30 requests/seconds for read.

a server can have a limited amount of threads working at a time, so, assuming a server has 10 threads
for 10 simultaneous queries, we will be needing 2 - 3 servers and a load balancer.


we will be needing DB replication (2 - 3) also, as we can not send all 30 requests to same DB.
