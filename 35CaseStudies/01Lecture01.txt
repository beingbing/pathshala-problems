~~ tackling system design problems ~~

DSA problems has a definite correct/incorrect solution.

- there maybe multiple solutions, you need to discuss and improve as no design problems is
perfect.

- problems on it are more of a discuss where both interviewer and interviewee come up with
a best solution.

- drill down the scope, give some solution and then discuss further on it to improve it on
the basis of requirement.



1 - clarify functional and non-functional requirements
functional requirements
    ->input     f(x)    ->output
    ->userId    f(x)    ->timeline
    ->tweet     f(x)    ->posted or not

non-functional requirements, e.g. -
    - system should be highly available
    - it should have low latency
    - consistency


2 - back of the envelope calculations, e.g. -
    system might be producing 20GB/month
    no of requests need to be handled per seconds
    data handled per seconds
    storage of data
    how much load will be balanced
    read/write ratio


3 - coming up with a high level design (frontend - backend - database)
database -
    what DB ?
    Data model, making some ER diagrams
    indexing, partition-tolerant, federation.


4 - diving deep into each component -
we generally do not dive deep in frontend, as in most of the cases it is much simpler
except a very few cases.
we normally dive deep in backend, DB or both.


5 - scalling system designed depending on increase in different parameters.


sometimes, interviewer makes you skip step 2
