~~ reliability ~~

Before we venture into discussing issues and best probable solution for them
in a particular scenario, we need to get ourselves familiar with certain terms.

The systemic design of a software needs to follow three basic principles for it
to be called a good design -

1. reliability -
The system is reliable (gives valid response) in every situation.

2. scalability -
system is able to manage x amount of requests together in terms of certain load.

3. maintainability -
system should be maintainable if new features need to be added, or should be easily
debuggable, if any issue is found.

so, now we are going to describe what each of them are, and what are their components,
and will discuss some suggestion to improve each one of them for a good systemic design,

focusing our discussion on 1. point

# Reliability -
it focuses on that the application/software keeps running and gives the output no matter
what happens.

an ideal reliable scenario is, even if the world is to end, the system keeps giving
corresponding valid responses to each request.

so realistically, the system should be fault tolerant.
no matter the fault, system is able to give corresponding valid responses.

fault - some type of error/issues that occur in a system.

fault -
1. hardware fault.
 - power going off.
 - connectivity loss.
 - hard disk / RAM failure.
due to this our requests start failing.
To avoid this, make sure that there is no single point of failure. (There are multiple servers)
There are many strategies to do this, like, load balancing, replication, etc.

2. software fault.
 - code / configuration bugs
 - malfunctioning of application.
It should not happen that, a complete system goes down just because of a single bug.
There should be an efficient mechanism to handle errors/bugs/exceptions/issues.
Unlike hardware fault, it will happen on every server copy, it will not be prevented by preventing
single point of failure.
for this,
a. we need to keep testing our code and have a good test coverage for every flow.
b. We need to keep monitoring our servers.
c. handle exceptions and errors gracefully (handle them, do not close down the server).
