~~ Understanding web architecture - backend ~~

Data storage and retrieval from DB happens via backend. which in turn goes through
frontend for storage.

So, backend needs to provide a facility to client so that client can store/update data.
so, this facility can be thought of as a function which is exposed by backend, so that
the function can be called and client can access the exposed functionality.
And that is what exactly backend does.

Note: normal functions which we write in a language can only be expressed in a certain
environment for that language, but these functions which are provided by backend
needs to be available on overall internet.
So, these kind of functions which are available to be called on the internet are
called as API (application programming interface).
So, API is nothing but a function exposed over the internet to be called by a client
or a frontend.

client can approach DNS to access backend and can then called the respective 
function with appropriate parameters (like data and image) to get the job done.

Note: the data which is sent across is composed generally in a particular format
known as JSON.
you can even send a plain text too, but generally we use JSON.

Now, before passing on the data to the DB, first backend will verify the validity of data.
so, 1. validation (request is well formed and valid)
2. backend has address, username and password of both DB and FS, so it will form a connection
and will store/update.


These exposed functions can have certain types associated with them.
 - GET   - POST     - PUT      - DELETE

if we mismatch the type, generally things still proceed as intended but this is the convention.

so, as these are the functions, hence, these have ability to return something.
Generally, these functions return the status code.

These status codes also has certain convention associated with them -
- 2xx : everything is fine
- 4xx : client sent a request that couldn't be understood. (client side issue)
- 5xx : backend side issue (nothing wrong with request)


Scalling - 
1. scalling DB and FS
issues if a lot of users try to access DB and FS -
 - amount of data will be huge and can't be stored in single machine
 - due to huge data then data access can be slow.
 - failure of DB server due to external issues. (single point of failure)

2. scalling backend issues -
 - handling millions of requests as every request takes time and if DB is slow that time can
   shoot up, which can be a problem. It will eventually be using too much memory, space to run
   the code and eventually it will die down.
 - backend goes down. (single point failure at backend level).

3. scalling frontend issues -
 - if website size is huge, frontend server might be not able to bear the requests load.(slowness)
