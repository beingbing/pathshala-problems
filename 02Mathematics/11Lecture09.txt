~~ prime factorization ~~

given an integer n, print the prime factorization of given number.

M1 -

go from 2 till N and divide with all the number until you cannot divide it further
and while doing so, keep recording your number.

code -

// TC = O(n)
vector<int> primeFactorsM1(int n) {
    vector<int> ans;
    for (int i{2}; i<=n; i++)
        while (n%i == 0 and n != 1) {
            ans.push_back(i);
            n /= i;
        }
    return ans;
}

Question: will it ever happen that ans vector will contain a composite number ?
Answer: no, because if we consider composite number 4, then it would have already been
neutralized by 2x2, so, if a number is encountered which is composite, our n, would have
been reduced to a number which is no longer divisible by that composite number.




M2 -

1. we know that, factors of a number are symmetric around it's sqrt.
2. a. it is possible that, all the prime factors of a number lie in (1, sqrt(n)]
b. if a prime factor lie between (sqrt(n), n), then there can only be one such prime, because if there
are ever more than 1 then, there product will be greater than 1, which can not happen.
c. no other case is possible apart from a. and b.

code -

// tc = O(sqrt(n)*logn) ~~ (sqrt(n)) as ln is way too small
// logn is very small because inner (while) loop will only run for prime factors
// while the outer (for) loop will run for all the values.
vector<int> primeFactorsM1(int n) {
    vector<int> ans;
    int val = sqrt(n);
    for (int i{2}; i<=val; i++) {
        while (n%i == 0 and n != 1) {
            ans.push_back(i);
            n /= i;
        }
    }
    if (n != 1) ans.push_back(n);
    return ans;
}
