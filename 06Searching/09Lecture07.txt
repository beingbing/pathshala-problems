~~ single element ~~

given unsorted array with all the elements present in pairs together except any one element,
which is single.
find that one element.

sample example -
n = 9
    4   4   1   1   3   7   7   6   6
    0   1   2   3   4   5   6   7   8

here we can see, both left and right sides of answer holds different conditions which can help us in
deciding in which direction to move if we go with binary search.

left side of answer -> second element comes at odd index
right side of answer -> second element at even index

code -

if (a.size() == 1) return a[0];
low = 0, high = n-1
while (low <= high) {
    int mid = low + (high - low)/2
    if (mid == 0) {
        if (a[mid] != a[mid+1]) return a[mid];
        else low = mid + 1;
    } else if (mid == n-1) {
        if (a[mid-1] != a[mid]) return a[mid];
        else high = mid - 1;
    } else if (a[mid-1] != a[mid] && a[mid] != a[mid+1]) {
        return mid;
    } else {
        int firstOccurence, secondOccurence;
        if (a[m] == a[m+1]) {
            firstOccurence = m;
            secondOccurence = m+1;
        } else {
            firstOccurence = m-1;
            secondOccurence = m;
        }
        if (m%2 == 0) low = mid + 1;
        else high = mid - 1;
    }
}