~~ cache positions in web architecture ~~

In a three-tier system architecture, you can implement a cache layer at various points to
improve performance:

A. Presentation Tier (Frontend):
1. browser cache -
 - Cache static assets such as images, scripts, and stylesheets in the user's browser.
 - Cache frequently accessed data on the client-side to reduce the need for repeated
   requests to the server.

Note: For a polling API, when the application checks if the response is processed, the browser
may respond with 'no' if it looks into the cache. To ensure that the API call result comes
directly from the server and is not cached, we sometimes need to set a 'no-cache' policy in the
header. This ensures that the data is fetched fresh every time it's requested.

Note: A pull CDN also acts as a cache layer for frequently requested resources.

B. Application Tier (Backend):
1. API Responses: Cache frequently requested API responses at the server-side to reduce latency
and improve response times for subsequent requests.
2. Session Management: Cache session data to optimize user authentication and session management
processes, reducing the need to access session databases frequently.

Note: Both forward proxies and reverse proxies can utilize cache to respond to identical queries
from multiple clients.

C. Data Tier (Database):
1. Database Query Results: Cache frequently accessed database query results (like database objects
or entities) in memory to reduce the need for repeated execution of complex queries, hence, reduce
database load and improve overall system performance.
