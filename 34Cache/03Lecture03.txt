~~ cache invalidation and cache eviction ~~

before monving on to cache level patterns and how cache is organised, let's discuss two
important terms -

A. cache Invalidation:
When frequent queries are made for specific data, it's cached to improve performance.
However, if source data changes over time then the cached data becomes outdated, there's
a risk of serving stale information to clients. To address this issue, we need a process
to check the freshness of the cached data (if found) and update it (if necessary).
Cache invalidation is the process of removing or updating cached data when it becomes
outdated or no longer valid. It is essential for ensuring that clients receive accurate
and up-to-date information from the cache.

Techniques used for cache invalidation -
 - Time-Based Invalidation:
 Cached data is assigned a time-to-live (TTL) or expiration time. When the TTL expires,
 the cache either removes the data automatically or marks it as expired. Upon expiry,
 if the server detects outdated data, it discards it and re-computes the data, storing
 the updated information in the cache with a new TTL. However, determining the right TTL
 for a cache can be challenging as it requires balancing factors such as data freshness
 and cache performance.

 - Event-Based Invalidation:
 Cached data is invalidated based on specific events or triggers, such as database updates
 or changes to related data. Using a flag to indicate whether any associated data used in
 the calculation of cached data has been updated. When the flag is raised, it signals that
 it's time to recalculate and renew the cached data. However, this approach can introduce
 complexity and slowdowns, as the process responsible for raising the flag may become burdened
 with additional logic and responsibilities.

Strategies used for cache invalidation -
1. Cache-Control Headers: HTTP cache-control headers can specify caching directives, such as
max-age and must-revalidate, to control cache behavior and invalidation.
2. Cache Invalidation Patterns: Implementing cache invalidation patterns, such as write-through
or write-behind caching, helps ensure that cached data remains consistent with the source of truth.
3. Cache Monitoring and Alerts: Monitoring tools can detect changes in data or system status and
trigger cache invalidation processes as needed.

Considerations to be done while designing a cache invalidation strategy -
Granularity: Determine the granularity of cache invalidation based on the application's requirements.
In some cases, invalidating entire caches may be necessary, while in others, more granular invalidation
strategies can be employed.
Performance Impact: Cache invalidation operations should be efficient and minimize the impact on
system performance. Avoid excessive invalidations that could degrade application performance or
overload backend systems.

B. cache Eviction:
Cache storage is valuable, limited and designed with the goal of having more cache hits than
misses. So, when the cache reaches its capacity, cache eviction is the process of removing/replacing
data from the cache to make space for new or more frequently accessed data.

There are several eviction policies that can be used -
 - First In, First Out (FIFO): The earliest cache entries are removed to make room for new data.
 - Least Frequently Used (LFU): The least accessed cache entries are evicted.
 - Least Recently Used (LRU): Cache entries are tracked based on when they were last accessed,
 and the least recently used ones are evicted first.
