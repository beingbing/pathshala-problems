~~ reverse lookup - 1d ~~
given an array, find the sum of all its subarray.

brute force -
consider every array and find it's sum then add it to overall sum. TC = O(n^3)

code -

sum = 0;
for (i{0}; i<n; i++)
    for (j{i}; j<n; j++)
        sum += getSum(i, j)

int getSum(int i, int j) {
    sum = 0;
    for (l{i}; l<=j; l++) sum += arr[l];
    return sum;
}



2nd approach -
we can omit the getSum function from above approach

code -

ans = 0
for (i{0}; i<n; i++)
    sum = 0
    for (j{i}; j<n; j++)
        sum += getSum(i, j)
        ans += sum



better approach -
think in reverse, instead of consider all the subarrays and then finding their sum,
we should check what all subarray will consider a particular element and then
evaluate it's contribution

ex -
    1   -1  2   0   3   4
            ^
            |

all the subarrays starting at index 0, 1 and 2 and ending at 2, 3, 4 and 5 will contain
element 2 (ar[2])
so,
for i = 2 we have 3 options for starting point and 4 options for ending point
in other words,
for element at index i, we have (i+1) options for starting point and (n-i) options for
ending points

code -
for (int i{0}; i<n; i++)
    ans += (i+1)*(n-i)*a[i] // here a[i] is considered as we need sum of subarrays