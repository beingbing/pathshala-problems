~~ Maximize the expression ~~
give arr[n] and int p, q, and r then,
maximize the expression, p * arr[i] + q * arr[j] + r * arr[k]
such that, i < j < k

ex -
arr : [1, 2, 3, 4, 5] and p = 1, q = 2, and r = 3
o/p : 1 * 3 + 2 * 4 + 3 * 5 = 26 with i = 2, j = 3 and k = 5 is maximum

brute force -
run three nested for loops, to calculate i, j and k and keep track of maximum
value of expression produced. TC = O(n^3)

code -
mx = INT_MIN
for (int i{0}; i<n-1; i++)
    for (int j{i+1}; j<n-1; j++)
        for (int k{j+1}; k<n-1; k++)
            mx = max(mx, p*arr[i]+q*arr[j]+r*arr[k])



2nd approach -
select top 3 max elements and get the results
ans => this won't work because p, q, r and array elements can take negative value as well



better approach -
  |_ _ _ _ _ _ _ | _ | _ _ _ _ _ _ _|
  | max till j-1 | j | max till j+1 |
   from 0(preMax)     from n-1(sufMax)

so, mx = preMax[j-1] + arr[j] + sufMax[j+1]
ans your option for j can range from [1, n-2], otherwise there will be no option for i or k

code -
preMax[0] = p * arr[0];
    for (int i{1}; i < n; i++)
        preMax[i] = max(p * arr[i], preMax[i - 1]);

sufMax[n - 1] = r * arr[n - 1];
    for (int i{n - 2}; i >= 0; i--)
        sufMax[i] = max(sufMax[i + 1], r * arr[i]);

for (j{1}; j<= n-2; j++) {
    x = preMax[j-1] + q*arr[j] + sufMax[j+1]
    ans = max(ans, x);
}

if constraints become i <= j <= k then last loop only changes to -
for (j{0}; j < n; j++)
    ans = max(ans, preMax[i] + q * arr[i] + sufMax[i]);