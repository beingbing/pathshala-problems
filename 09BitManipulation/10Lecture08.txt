~~ bitwise OR of subarrays ~~

given array, find sum of bitwise OR of all the subarrays.

M2 -
instead of going for all the subarrays, think about the contribution due to a particular bit
position bi
In the bitwise OR of how many subarrays a particular bit will be 1

long ans = 0, mask = 1L << 31
for (i{31}; i>=0) {
    int next = n // to know how many possible subarrays on right may have current bit set
    for (j{n-1}; j>=0) {
        if (a[j] & mask) next = j // element from right, which has ith bit set
        ans += (n - next)*mask
        // 'mask' is the contribution
        // '(n - next)' is the count of contributing subarrays till index j
    }
    mask >>= 1
}
return ans;

TC = O(32n)
