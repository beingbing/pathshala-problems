~~ design min stack - 2 ~~

- encode both current and previous minimum in a single value.
    and then store that value in stack as element, what will be unique about this value is,
    we will be storing the original value in curMin and modified value in stack.
- recognise the point of change
    point of change will come whenever we get an element which is smaller than our curMin.

when realElement < curMin
proxyElement = 2*realElement - curMin
curMin = realElement
(and, proxyElement < curMin)
so, whenever, s.top() < curMin (it's a proxyElement)
so, retrace back to prevMin and pop it off, for this -
prvMin = 2*curMin - proxyElement
curMin = prvMin

encoding => 2*curMin - prevMin = st.top()

class MinStack {
    stack<long> s;
    long curMin;
    MinStack() {
        curMin = LONG_MAX;
    }
    void push(int x) {
        if (s.empty()) {
            s.push(x)
            curMin = x;
            return;
        }
        if (x < curMin) {
            s.push((long)2*x-curMin);
            curMin = x;
        } else {
            s.push(x);
        }
    }
    void pop() {
        if (s.top() < curMin) {
            curMin = (long)2*curMin - s.top()
            s.pop()
        } else s.pop()
    }
    int top() {
        if (s.top() < curMin) return curMin;
        return s.top();
    }
    int getMin() {
        return curMin;
    }
}

TC = O(1)
SC = O(1)
