~~ Huffman Encoding - 2 ~~

given characters and their frequency.

struct Node {
    char c;
    int f;
    struct Node* left;
    struct Node* right;

    Node(char ch, int freq, Node* l, Node* r) {
        c = ch;
        f = freq;
        left = l;
        right = r;
    }
}

struct Comp {
    bool operator() (Node* n1, Node* n2) {
        n1->f > n2->f;
    }
}

void getCodes(string code, Node* root, vector<string>& ans) {
    if (!root) return;
    if (!root->left && !root->right) ans.push_back(root), return;
    getCodes(code+'0', root->left, ans);
    getCodes(code+'1', root->right, ans);
}

priority_queue<Node*, vector<Node*>, Comp> pq;
for (i{0}; i<n; i++) pq.push(new Node(s[i], f[i], null, null));
while (pq.size() > 1) {
    Node* n1 = pq.top();
    pq.pop();
    Node* n2 = pq.top();
    pq.pop();
    Node* n3 = new Node("", n1->f + n2->f, n1, n2);
    pq.push(n3);
}
Node * root = q.top();
vector<string> ans;
getCodes("", root, ans);

TC = O(nlogn)
SC = O(n)
