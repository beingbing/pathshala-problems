~~ forward and reverse proxies ~~

LB can also act as a forward/reverse proxy depending on application architecture
requirements, hence we will learn about them now.

so, what is a proxy server and how many variations does it have ?

dictionary definition of proxy -
if someone acts or does something on behalf of someone else.

proxy server - acts on your(browsers/applications) behalf when facing internet.

proxy server can be classified into two main types depending on what purpose they fulfill -
A. forward proxy (on behalf of browsers) -
- Acts on behalf of clients to access resources from servers.
- Sits between the client and the open internet.
- Masks the client's identity and provides anonymity while making request.
- Commonly used for security, content caching, and network performance optimization.
example, browsers sitting in a college campus when want to access internet, goes through
a proxy server which checks their requests and then permit to access internet.

advantages -
    - proxy server can block requests to certain websites with the help of a firewall.
    - proxy servers can manage requests better.
    example, if multiple clients are accessing same browsers, so instead of sending multiple
    requests for same resource, proxy server sends a single request and respond to all clients
    with the response, thus optimizing to increase performance.
    - can improve performance by introducing caching.
    - can ensure better security, to evaluate incoming responses to check for any virus or
    malware.
    - it ensures requesters anonymity by abstracting out the details of client.

B. reverse proxy (on behalf of applications) -
- Acts on behalf of applications to grant resources in response.
- Sits between open internet and application servers.
- Provides security to application servers by shielding them from direct access and hiding their details.
- Distributes client requests among multiple servers for load balancing.
example, Nginx

advantages -
    - can prevent DDoS attacks.
    - can also act as an API Gateway - handling client's sessions, cookies, managing SSL certificates
    and handshakes (LB variations)
    - caching of responses and return it to the clients
    - helps in compression - unzip the incoming requests then forward it to backend and zip back it
    with the response to clients.

This closes our maintainability section for Backend server on a web application architecture, we will
now discuss and explore scalability of Backend server.
