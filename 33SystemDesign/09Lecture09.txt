~~ polling and websockets ~~

Now, moving our discussion back to communications part which takes place once processing
is done and backend is ready with a response.

Continuing with our polling explanation -
after client gets token, they will ping servers to check on the status of their requests
at a regular interval of time. So, the status will be communicated by backend server to the
enquirer only after receiving a ping.

types of polling -
- long polling
    When a client sends a request to the server, the server holds onto the request even if
    it's not immediately processed. Once the server processes the request, it responds
    accordingly. The request remains stored until either the server sends a response or the
    client times out due to a delayed response.
    
    During this time, the connection for the request is kept alive, but it doesn't consume
    many resources. This allows the server to handle thousands of such connections simultaneously
    without overloading. If these connections were resource-intensive, they would need to be
    managed in queues, leading to the process discussed in our previous lecture.

    benefits -
        - real time updates received
        - comparatively there will be less amount of network calls.

    cons -
        - design a system to hold those connections.
        - machine should not go to overload with a lot of connections.

- short polling (almost never used)
    as already discussed, I'll periodically ping the server to check if my request is completed.
    If it's done, I'll get a response; otherwise, I'll receive a "not-yet-completed" status. 
    
    However, this method isn't commonly used due to various factors like determining the time
    interval between each ping. If the interval is too short, it results in too many requests,
    and if it's too long, the response is significantly delayed.

    Despite being the simplest form of polling, it's not very practical.

Note: overhead in establishing a new TCP connection: DNS lookups, TCP handshake, SSL/TLS handshake, etc.
Without a keep-alive, every HTTP request has to establish a new TCP connection, and then close the
connection once the response has been sent/received. A keep-alive allows an existing TCP connection
to be re-used for multiple requests/responses, thus avoiding all of that overhead. That is what makes
the connection "persistent".

long polling was so good, it was taken to a next level and combined with push communication so that
the implementation become -
why not keep a connection all the time (make it persistent) and make this connection full-duplex 
in nature. that is, client can query anytime and server can push response any time. This 
concept is known as websockets.

websockets:
client and server have a permanent duplex connection between them. and, both sides
are listening. (example, notification system)

cons -
as it is a duplex connection, LB can't do much here, if you have thousands of connections 
then server has to maintain them and handle them, they can't be delegated to another servers.
