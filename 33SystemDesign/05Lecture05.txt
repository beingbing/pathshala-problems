~~ backend maintainability: microservices ~~

If code to deployed is too big then from LLD perspective it was proposed that we should
chunk it in smaller modules (following SRP), these smaller modules then can call each other
to get the job done. but in deployment, this small modules are combined and put on a same
machine. So, at the end although modules helped us on LLD level, deploying the whole code
on a single monolithic server, so it still runs as a big blob of code.

The whole code getting deployed to a single server -> monolithic architecture.

issues -
1. If we need to deploy a change, then if a change is deployed for one microservice, still
we need to check all others as well to confirm that the change is not impacting them. coz
after deployment the whole code converted into a single codebase, so we need to make sure
then there is no problem with that.
2. configuration changes - like env vars or DB details etc.
If one module is moved from one DB to another then all modules which are still using old
configurations need to be identified and tested, so that it can be ensured that changes
have happened only for the intended module.
3. error detection - finding which module produced this error is a huge task, coz all modules
after deployment as a monolith are connected to same DB and and if DB error occurs then it
is difficult to find which module actually produced it.
4. difficult to scale - as codebase is big, so server capacity is high hence expensive
thus its replicas will also be expensive. And after peak hours we might also not need these
servers.

So, it is then proposed that if we are maintaining modules during development of code then
why don't we maintain it when we move it to deployment as well.
hence, each of these modules (or a group of modules) is termed as one microservice, and
deployed as it is.
So, we have, for example, 4 different servers constructively serving a complete codebase.
here, sometimes microservices need to contact each other as well.
So, when they were modules this internal communication was using function calls which then
become REST API calls after deployment.

advantages of turning monolith into microservices -
1. flexible in deployment.
what we need to check during deployment.
- the module which needs to be deployed should be well tested.
- it is well integrated with other microservices (integration testing)
2. configuration changes.
each module maintains its own environment.
3. error detection - got very easier.
4. scaling - only some microservices need to be scalled hence, scalability becomes cheaper.
5. technically flexible - any module can be re-written and still can be integrated with
already working microservices

challenges -
1. we do appropriate splitting of code.
There should not be too frequent calls among microservices (it might increase latency)
2. service discovery.
monolithic codebase had functions for inter-module communication but now these microservices
need to know each others IP addresses as well to communicate.
some common service discovery tools are - zookeeper, apache curator, nginx and aws cloud
provide them out of the box.

we will further discuss service discovery in depth. Along with proxies as a part of
maintainability of Backend server.
