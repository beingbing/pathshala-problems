~~ database scalability: sharding ~~

So, as we know if we can not improve our performance to scale any further that means we have a
huge amount of data and adding extra DS to manage them is not helping. Then we need to split our
load into multiple DBs, for which we use sharding.

It involves horizontally partitioning data across multiple servers or nodes which are called
shards. Each shard contains a unique subset of data. 

deciding which data goes to which shard involves the following:
- Data is typically partitioned based on a shard key / partition key / Hash function.
- The shard key could be a unique identifier, a specific range of values, or a hash of the data itself.
- The goal is to evenly distribute data across shards to balance the workload and optimize performance.

Each shard handles its own read/write operations independently, reducing contention and bottlenecks.
Consistency mechanisms of ACID principle ensure that write operations are propagated and synchronized
across all relevant shards to maintain data integrity.

Note: Instead of having a hashing function we can also maintain a table, which maintains mapping
for corresponding ID and in which Shard it is located. Hence, our application will first approach
the table to know the shard ID then it will go and search in that particular shard.

Shard key resides in routing layer on top of these shards, hence every request goes through routing layer.
Which introduces an extra layer in our three tier architecture, making it 4-tier.

pros of sharding -
1. scalability
2. also helps in making architecture Fault tolerant and reliable.

cons -
1. complexity of system increased because of an extra layer.
2. latency is increased because of an extra layer.
3. we need to have to fault proof the routing layer as well.
4. non uniformity of data - example, one of the shard has way more data as compared to others.
(If one of the shard increases beyond a point then we need to go for re-sharding.)
5. some queries can be across multiple shards, which will make application/backend logic complicated.
