~~ Database maintainability: SQL vs NoSQL ~~

with DB maintainability, we need to make a choice of using right kind of DB

the idea is not to reinvent the wheel but to use existing solutions.
Meaning, do not start with a relational DB and then modify it for your specific
need, when you have ready made solutions available in market satisfying your
particular use case.

For this we need to first understand what kind of DBs exist and which to be used
in what conditions.

broadly all DB can be divided into 
A. SQL (relational DBs)
- organized in forms of tables which are joined using SQL queries.
- they ensure ACID properties and hence perform transactions very well.

limitations -
 - requires strict schema (wastage of storage with loose schema)
 - handling images/videos (they are stream of bytes, not good to store in SQL)
 - performance - if tables are huge with large amount of data then queries take time

B. NoSQL (non-relational DBs)
- key/value pairs (example, redis, memCache) - ideal for creating eCommerce carts
- document DB (example, mongoDB) - instead of having tables we have huge chunks of JSON
 for each object stored in DB. Although it is still a kind of key/value pair but it is
 representing a particular set in the form of JSON.
- graph DBs (example, social network)
- time series DBs (example, uber)

to conclude and compare -

SQL
- strict schema
- Joins
- ACID (transactions)
- sharding is done to store a lot of data

NoSQL
- flexible schema
- application logic
- BASE principles
- can store a lot of data
