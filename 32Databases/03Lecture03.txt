~~ Leaderless replication model ~~

We saw that giving read/write capabilities to all replicas in a distributed DB cluster
makes consistency hard to maintain. Hence, to ensure consistency along with partition
tolerance (reliability) -

We will first recap the issue that we faced -
If two replicas are updated with different values at the same time then when they try to
communicate changes made to them with other replicas then whichever replica was first to
approach other replica will modify the value to its value, which will lead to permanent
inconsistency as some DB replicas will have values from first server and others will have
values from second server.

So, above approach in which client is allowed to make read/write requests to any replica is
called Leaderless replication model (example, Cassandra)

how to handle it ?
Timestamp is introduced with each update, based on which, the latest written action wins. (LWW)

issues -
each server is present in a different machine and as each machine's time can be different or
can be changed (it is not synchronized with world time as well), so this
solution implementation is not that straightforward.
This is called, time synchronization issues, as system time (machine clocks) are unreliable.

solution -
we can use NTP(network time protocol), in our network, we can have a common place to provide
us time for synchronization, which gives us synchronous time stamp.

so, after introducing NTP, our simple updation action has become complicated.
The DB server which we normally run is not that effective to perform this complex
timestamp comparison based action effectively.
Its very difficult to write the logic at DB server level to compare time stamp and
decide according to it, also what if timestamp received via NTP gets corrupted on its
way and now we need to be prepared to handle that as well. Network is always unreliable.

So, to, remedy this, we need to run a parallel process, whose sole purpose is to
maintain the time Consistency. So, this parallel process in case of Leaderless replication
model is called as anti-entropy process.
This has the sole purpose of reading data in different replicas, and keeping the latest
change.
This is a background process that syncs the DB.
So, with this there is no need of concept likes synchronous/asynchronous updates as
anti-entropy process keeps running in the background to sync all DBs in cluster.
anti-entropy process internally uses merkel tree to get the differences in time and
then to conclude the latest updates among all available updates.

problem -
this process becomes very crucial and if single point of failure occurs in it, then
data in our DB becomes stale.

So, we ourself with using only our available DBs has to come up with a solution to
maintain consistency in distributed system (reliability/partition ensured) as relying
on anti-entropy process alone is very risky. For this we employed the concept of quorums.

Quorum based approach -
- We ensure that a subset of replicas agree on an operation before considering it successful.
- it's a non time stamp based approach.

so, the solution we came up with is, to read/write from multiple DBs, so, the
probability is high that you will read/write from atleast one of the most updated DB.

so, the count of multiple DBs on which a client writes simultaneously is called
write quorum. and similarly we say for read quorum.
and also further to build on this, we try to maintain -
write quorum + read quorum > no of DBs (it means read and write quorum will have atleast one
DB in common) so to ensure 100% Consistency.
In other words, write/read quorum > cluster-size / 2
this way atleast one DB in that quorum will be the most updated one.

drawbacks of Leaderless replication model -
- it is not a strong consistency model. (because everyone reading at the same time will not get
the same value for the same key)
- In case of a failed write, where not all the DBs from quorum are updated but some of them
do, there is no way of rolling back the write operation completely, hence, violation of atomicity
part of ACID properties.


as you can understand from above discussion this Leaderless replication model is a complex
system to maintain.