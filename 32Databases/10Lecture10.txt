~~ database scalability: indexing ~~

2. Indexing
organizing and optimizing data access for efficient retrieval and querying. It involves creating
data structures that enable quick lookup and retrieval of information based on specific criteria,
such as keys or attributes.

The data structure that we usually go with is a Map, and Indexing in layman's terms is the process
of creating a map over some chosen key value pair and persisting it in the memory. And that persisted
map is termed as Index.

It helps improve the performance of data operations by reducing the time and resources required
to search and access data in actual table, especially as the database scales up with increasing
volumes of data and users.

example, we can create a mapping (ordered(O(n))/unordered(O(logn))) of frequently searched up key
with its location in the table.

different kinds of indices provided by DBMS - 
A. primary index (or, clustered index)
These indices are built over Primary Key. Provided automatically to us by DBMS out of the box. We do
not need to put extra effort to build it. 

B. secondary index (or, non-clustered index)
These are built on non-primary keys. We have to build it by ourselves.
example, To show us the nearby taxi, uber creates its own index based on location.

we should build secondary indices only when -
    - identified frequent queries
    - scaled to a substantial users

Note: in DB,
    - ordered map is built using B-tree or B+ tree
    - unordered map is built using hashing based index

we will next explore data structures (ordered/unordered maps) used to create these indices in more depth
