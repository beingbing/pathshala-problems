~~ single leader replication model ~~

As we saw, Leaderless replication model was very complicated to implement. Hence,
simpler replication models are discussed now.

idea of this model follows master slave architecture.
This has a primary DB which is called as Leader/Master.
And replicas is called Slave.

according to this, Leader can only direct the slaves to update their values.
and all the latest updates only comes to primary DB.

updation from Leader to slaves can follow asynchronous/synchronous updation whichever
is suitable. 99% of the time it is asynchronous.

Read action can happen from both leader/slave. but Write can only happen at leader.

benefits -
- many copies of data = increased durability
- increased read throughout

issue -
1.master handles a lot of updation traffic due to which leader can be overloaded and
hence write throughout can be worse than what it was with single server system.
2.write latency can be high.
3.Master becomes single point of failure.
Also, if master goes down without forwarding all the updates then we have data
integrity issues.

To handle 3., we can promote one of the slave to be leader (this idea is used in mongoDB)

 - automatic fail-over
If our primary DB dies then we need to replace it with secondary.
a. A sequence of seniority can be created.
b. seniority based on latest update.

issue with it -
1. distributed consensus - how to identify that master is dead. so, when to initiate fail-over process.
This is hard to predict as most of the updation logs received by follower DBs are asynchronous.

we can use a pre-defined time elapse taken by master to respond. (we need to decide on it very carefully).
If response time crosses pre-defined threshold, we start fail-over replacement process.

2. how to define the next leader.
we can use one of the ideas from a. or b.
but the routes need to be updated to get redirected to the new leader.
hence,
3. routing problem to new master ?

Solution - as read can be received by any server similarly, the write can also be
received by any server, but it gets redirected to current master.
Hence, it is DBs responsibility to redirect all the updation requests to correct leader.

now,
4. split brain problem
If all the previous problems are resolved as explained then this 4. problem arise.
Because the old dead master might suddenly wake up, so then we have a scenario where
we have two masters with different data.
whenever this happens we have to kill one of them.
