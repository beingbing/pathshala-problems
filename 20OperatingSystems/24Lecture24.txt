~~ swap space ~~

swap space is also a paging implementation.

let us assume a process PID requires a huge amount of space (e.g.- a game). obviously
it will have a lot of pages, and it is not the only process which our OS be handling.
so, if 10 pages exist then if 3 of them are in RAM then other 7 need also to be exist
and be present somewhere. this 'somewhere' is swap space.

swap space is a reserved place in HDD which has pages which are ready but not in the RAM.

how do process know whether a page is in RAM or HDD ?
we use a flag, if it is true, page is in RAM and vice versa. If we try to access a page
which is not in RAM then it is called page fault. If page fault happens, some handlers
are run which goes to locate the page to find it in HDD, and that page is shifted from
SS to RAM and then the flag is turned true and its frame id is recorded.

what if we require a new page and memory is full ?
then we require a page replacement policy, which removes an already in-memory page with
the required page. 

servicing of page fault and what is the time assoicated with it ?
whenever a page fault occurs, we need to go to SS, search for it and load it in memory.
It obviously consumes a lot of time. e.g. -

    avg. page fault time, t = (p * tf)  +   ((1-p) * tn)

p = probability of having a page fault.
tf = time taken in a page fault.
tn = time taken in a normal routine.

so, for an acceptable measure, p should be approximately  1 / (400000).

when a page fault occurs, then we simply shift a page from SS to RAM, its a normal process
which do not involve CPU a lot.
