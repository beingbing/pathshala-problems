~~ termination of processes ~~

diving deep into as what happens when a process completes and exits and how it comes into be
in terminated-state. What is the steps that gets followed after a state terminates -

for a process to stop running and terminates, what different ways are there -
- voluntary exit: process itself voluntiers to end as its job is done. process is complete and it exits.
the process calls exit() system calls for this to happen.
- Involuntary termination: process job was not done but it had to be killed. 
    - OS kills the process because of some unauthorized access (some accesses which can not be granted)
        e.g. - segmentation fault error
    - parent kills the child (e.g. - TLE)


after termination-state -
- resources of the process are freed.
- return exit code to parent process (e.g. - main() 0 means successful execution).


issues that may arise due to above setup -
- parent gets completed first then their child processes are called orphan processes.
orphan processes are then inherited/adopted by init. after that -
    - either init kills them.
    - init lets them run and wait for their completion.

- child gets complete and want to pass an exit code to parent, but parent is not waiting for it, thus,
second step after termination doesn't gets fulfilled. such processes are called zombie processes -
they waits for parent to complete, and then gets inherited by init which then kills them.


How a process kills another process ?
the process which want any of its child process to die, to that it sends a signal SIGTERM.
