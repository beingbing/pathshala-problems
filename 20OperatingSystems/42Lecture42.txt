~~ reader writer problem ~~

one other synchronization problem -

lets say there is a file and we have a list of readers and writers who want to read and write
the file.

all readers and writers are there own different threads.

which pair need synchronization out of -
reader vs reader    // no need synchronization
writer vs reader    // need synchronization here
writer vs writer    // need synchronization here

we can allow multiple readers to enter.
when first reader enters, it should grab the mutex so that no writer can enter and whenever
last reader leaves it should signal that mutex is available for grab.
hence we will maintain a readers count.

mutex w_or_r;

writer:

wait(w_or_r);
// write
signal(w_or_r);

reader:

readerCnt++;
if (readerCnt == 1) wait(w_or_r);
// read
readerCnt--;
if (readerCnt == 0) signal(w_or_r);

there can be synchronization issue with readerCnt variable. to avoid it we need another semaphore
to manage readerCnt.

mutex mutx;

reader:

wait(mutx);
readerCnt++;
if (readerCnt == 1) wait(w_or_r);
signal(mutx);
// read
wait(mutx);
readerCnt--;
if (readerCnt == 0) signal(w_or_r);
signal(mutx);

this solution is more 'reader' friendly, there is a possibility for writers to starve if readers
keep coming once the lock is acquired by the readers.

to avoid this, we give writer more priority, so as soon as a writer is available, we stop accepting
more readers and let other readers do their thing, then pass the lock to writer.

this is 'writer' preferred solution.

do its implementation by yourselves.
