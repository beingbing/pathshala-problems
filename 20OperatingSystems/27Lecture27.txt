~~ second chance algorithm ~~

we will maintain a LL/queue of all the pages that are currently in memory. 

and also will maintain a bit for every page.

then, if a page needs to be replaces we start from the start of queue and check reference bit of
every page,

if reference bit is 0, the page is replaced but if the reference bit is 1, that bit will be
changed to 0 and the page will be given a second chance to stay in queue. and the pointer will
be moved onto the next page.

once pointer reaches the end, it again starts with the first page and this cycle goes on.
A page which was given a second chance will be checked again in current iteration if again
bit was found 1, then it will be spared again, but if not, then it will be replaced.

whenever a page is used, then if it has bit 0, then it is changed to 1, and if a page has bit
1 then it stays 1.

this second chance algo can be further extended and used to give more changes, e.g. - if we use two bits
for each page then we can give upto 4 iterations to each page and henceforth.

**Dirty bit:

when we replace a page with another page in RAM, the outgoing page will again go back to SS, but Dirty
bit tells us whether we need to update the page in SS or not.
because if a page came from SS to RAM, it was copied, and if it has been modified and then moved back
to SS then SS need to have the updated copy, hence it becomes compulsory for us to update the outgoing
page in SS, but if a page lived in RAM and didn't get modified then we save a copy operation here,
by just removing that page from RAM and keeping the copy of it in SS intact.

so, combination of reference bit and dirty bit gives us a good measure of which page can be replaced -

reference-bit       dirty-bit
    0                   0           preferred to be replaced
    1                   0           -|      depends on
    0                   1           -|      your implementation
    1                   1           never preferred

in some implementations, CPU in free time update the dirty pages in SS and change their dirty-bit to zero.
as it will be more efficient in future processes.
