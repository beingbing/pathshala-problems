~~ 1: resource management ~~

function of OS: resource management
in compiler based language.

when you write a code, then, compiler transforms your code into machine level code (understandable
by machine), then, we execute the code.
but, how do you actually run it for execution after compilation, for that a cycle happens which is -
fetch/decode(understand)/execute cycle with every line.

line is loaded into a temporary memory somewhere to get execute, it is then decoded and executed,
this cycle happens with every line.

in interpreter based languages, the compilation and execution step is inter-twined, this is also known
as lazy compilation, as we are compiling and then loading every line when it actually needs to be
executed.

requirements to execute a code -
- RAM/memory where the code can be kept and all it's variable values can be kept so that no other
code interfere with it or tries to change it, or not by mistake it changes for other programs
- execution thread (CPU core)
- availability of I/O drivers to fetch/send required stuff from/to those sources (HDD for persistent data) 

OS is responsible for providing all the above stated resources.
e.g. - if you are alloted memory from 100 till 200 and if you try to access memory location 205, you get
segmentation fault or index out of bound error, originated by OS.

system calls - commands that OS provide us to let OS know when you need something from it.

every language has wrappers around these system calls like c/c++ has scanf/cin wrappers for read()
system call. To make their usage handy.
