~~ threading model ~~

history of concurrency and how OS developers came up with the idea of kernel threads, where
they can be used in collaboration with different user threads to actually support the concept
of concurrency.

Initially, OS developers only thought of parallelism and processes. But initial design, didn't had
anything related to concurrency. 

some software developers came up with threading libraries, what it had was -

let's say there is a running process p1, scheduled to CPU. so this process in itself had a scheduler
and divided the program into different threads t1, t2 and t3. and it internally started scheduling
threads, as soon as it got CPU time.

but this initial design of using libraries for threading didn't fair well as -
1. there is no actual concurrency happening, it just sped up some of the processes.
2. if one of these threads ask for user input, OS interprets it and moves the process out
as OS assumes that the process will be waiting for Input and will not do any other work, unaware
of the fact that, the processes has other threads which may be performing other background
computations.

so, because of these issues, OS developers were forced to come up with concurrency. Hence, they introduced
some light-weight processes (LWP) or kernel threads.

just as processes, these kernel threads could be scheduled on the CPU, so every process will get some
kernel threads, which it could use to bind its own threads.
so, process will bind those kernel threads with its own threads and OS will treat them as separate
processes and actually scehdule them.
so, actual concurrency happens when OS assumes each of these threads is a separate process indeed.

so, as soon as kernel threads got introduced we came up with different models of binding user threads
with kernel threads.

- every process will be given a single kernel thread, and the process can scehdule different user
threads on the same process.
this was the initial model, which failed.

- one to one modeling. you will be alloted a separate kernel thread for each user thread. but in it
there was a limit to kernel thread provided at a time, so if you have more user threads than
kernel thread then you have to wait for getting them separately after those kernel threads gets over.

- modern model (many to many model): OS provides us with a pool of kernel threads, you can recycle
these kernel threads to complete all your user processes.
