~~ multilevel feedback queue scheduling ~~

we will go still closer to an actual scheduler algorithm in use. For this we are going to discuss
multilevel feedback queue scheduling algorithm.

if we remove the last standing assumption as well, then we need to make estimates of their runtime.
so, this algorithm states that -
lets maintain multilevel queues,
    q1      q2      q3  ...
higest -> lower -> lower ...
I/O intensive -> CPU intensive

penalise (move them to lower priority) the processes which do not interact.

All the processes are filled in q1 and a smaller time quantum of around 10ms is set and all processes
are executed in round robin manner.
Those process which consume the complete time without interacting will be moved to lower priority levels.
Every next queue will have a slightly higher quantum then the previous one and will execute the processes
in round robin manner and will demote the CPU intensive processes further and further.

The disadvantages are -
- starvation is still a problem, as if a process which has downgraded to lower levels will starve for
CPU time.
- some processes change their nature after a while.
- some proesses may trick the algorithm to remain in high priority. (asking for fake I/O)

for first two disadvantages we have a common solution: priority boost.
after some long time (e.g. - 2 sec.) we can shift all the process back to q1.

to solve the third disadvantage, instead of replishing everytime a round robin turn comes for a process
with the complete time quantum available for that process, we will keep a time quota, once that quota
is exhausted the process will be downgraded.
This will not affect the genuine processes due to priority boost.
