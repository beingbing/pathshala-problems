~~ banker algorithm ~~

lets assume we have n processes, and they interact with m different resources.

and we require each process to declare all the resources it will require to run.
so, each process will declare an array of size m, where the process will declare
whether it will need that resource and if yes then how many instances will be required.

thus we will have a 2D array where each row will be representing a process and column
will be a resource and a[i][j] will have the maximum instances of resource j that can
be requested by process i.

then OS will further maintain a 2D array called allocated which will keep the number
of resources of j allocated to process i.

so we have two different 2D arrays, 'need' and 'allocated'.

and there will be an array 'available' of size array where every resource will declare how
many instances it can provide at a time.

e.g. -

need matrix

    r0  r1
p0  10  1
p1  4   1
p2  9   1

allocated matrix

    r0  r1
p0  5   0
p1  2   0
p2  2   0

available array

r0  r1
12  1

is there a possibility of deadlock in future ?

safe state: if every process wakes up at the same time and ask for maximum of what they declared
(like p0 already has 5 of r0 but ask for all 10). then if there is a safe sequence in which
we can run these processes. If we were able to serve them all then we are in a safe state.

if no, then we are not in a safe state.

in above example, the safe state sequence is: p1  p0  p2

now, let's modify the above example -

need matrix

    r0  r1
p0  10  1
p1  4   1
p2  9   1

allocated matrix

    r0  r1
p0  5   1
p1  2   0
p2  2   0

available array

r0  r1
12  1

then we will be in a deadlock if all of them ask for their maximum of everything at the same
time.

so, the bankers algorithm simply says, do not let the state go into an unsafe state.
if any allocation can produce an unsafe state, then don't do it.

How to detect programatically if we are in a safe state or not ?

int max[n][m]
int allocated[n][m]
int available[m]

now we will create a need matrix need[n][m]

need[i][j] = max[i][j] - allocated[i][j]

bool finished[n] = {false}

step 1:
create need matrix and finished array

step 2:
iterate over all the processes and try to find which process can be scheduled next.
    - check if the current process can be the next process in the safe sequence

for (i{0} to n-1) {
    for (j{0} to m-1) if (available[j] < need[i][j]) break;
    if (j == m) {
        finished[i] = true;
        for (j{0} to m-1) available[j] += allocated[i][j];
    }
}

JTB modified this algorithm to actually store the sequence by making finished array of type
int and actually storing the process number which will be next.
