~~ introduction to process scheduling: FIFO ~~

at the ready-state we have ready-queue, from this queue, a process is selected and shifted to
running-state by giving it to a CPU.

How a scheduler selects a process from ready-queue to execute ?
- to decide with which scheduling algorithm we must opt in.
    - time taken by process to complete must be less.
    - turn around time = time(completion) - time(arrival)
                       = running time + waiting time
    - we will try to minimize the average turn around time as much as possible


assumption to simplify creation of scheduling algorithm -
- all processes/jobs will take same amount of time to complete
- once a process is in running state, it can not be paused
- we know the complete runtime of every process beforehand
- no job will use I/O

by making these 4 assumptions we can conclude that all processes are a ditto copy of each other. In
that case a simple FIFO approach will be the best.
- here, the order of process execution will not affect the avg. time taken.

let's remove our first assumption and see what all changes it brings -
- then we need to make our algorithm intelligent in terms of, if multiple processes are available
to be run then pick the one with smallest runtime.
so after removing the said constraint, FIFO doesnt make much sense.
This is known as convoy effect.

convoy effect -
a process with huge runtime comes before all small process, then they all get accumulated in ready-queue
waiting for the big process to complete.

hence convoy effect confirms that FIFO is not a good choice for being a scheduling algorithm.
