~~ concurrency vs parallelism ~~

parallelism: multiple different processes doing different jobs at the same time in a computer.
it is implemented using processes and/or process-scheduling. Each process is scheduled on different
cores of CPU and then scheduling algorithm distribute CPU time among them.

concurrency: same process doing multiple jobs in parallel, then it is called concurrency.
it is implemented using threads. 
Threads are light-weight processes, they exist within the same process and data is shared among
them. 

difference between process and threads:
processes has different address spaces, they can be accessing something completely different.
but threads are a part of common process, so they may have some common memory, that they might
be accessing.

If we already had parallelism, then why we felt the need of concurrency.
- computational speed up. e.g. - merge sort can have different threads working on same data, hence
time complexity gets improved from n2 to nlogn, which is a normal case but using threads, it can
be further (theoretically) improved to n.
but it is not practically possible, as we have normally 4 cores and this theoretical implementation
can demand threads raising upto O(10^5)
This idea would not work on normal machine, as it will spend a lot of time in context switching.
so the above implementation might perform worse than nlogn.

- background processing.
- users are slow in giving input, and we want to perform some other jobs in the same process meanwhile.
