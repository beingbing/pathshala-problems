~~ round robin algorithm ~~

we already discussed SCTF and its drawback of starvation of huge processes.

this process is an ideal example of tradeoff between fairness and efficiency.

as turnaround time depends of completion time, hence if we tries to finish smaller processes
earlier, it will lead to a good turn around time, which will give us a good efficiency, but
fairness suffers
so, to keep the fairness we have a new metric,
                response time = avg(time given for the first time - arrival time)


so, we need an algorithm which keeps a balance between fairness and efficiency.
this is where round robin algorithm comes in.
Each process is given some CPU time for a definite time known as time quantum / slice, if it ends
within that alloted time process changed to terminated-state and other process is loaded otherwise,
it is interrupted and moved back to ready-state, and a new process is picked from ready-queue. In
this way all the process gets CPU time.
The DS used to implement round robin is circular queue or a circular linked list. 

if time quantum is high RR will work as FCFS, if it is too low, then most time will be spent on
context switch. So the best time quantum calculated experimentally is between 10ms and 100ms.

RR fairs well in response time.
but performs poorly in turn around time when compared with SJF and SCTF.

Apart from this discussion, the actual algorithm which is used nowadays is a hybrid of above discussed
algorithms.

and we still have one assumption which we haven't removed yet, will see what happens after we
remove that as well.
