~~ problem of synchronization ~~

it comes with concurrency.

it occurs because of concurrency + shared data.

race condtion: when multiple threads try to read a variable and change it at the same time, unaware
of the parallel action of other threads.

it happened because, the threads which went to update the variable were not aware of actions of other
simultaneously working threds. If there been a communication between them, then this would have
sorted out as we wanted.

so, it leads to the idea of mutual exclusion. This idea leads to atomicity.

atomic expressions will not let the problem of synchronization occur. 

critical section: set of instructions which can actually lead to race condition.

mutual exclusion and atomicity become of paramount importance in banking systems.

next we will discuss on solution of this problem.
