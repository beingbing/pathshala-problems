~~ perterson solution ~~

synchronization problem: critical section was modifying some resource which was mutually exclusive.
Ideally we shouldn't have allowed more than one threads/process to tamper this resource at a time.
As it can lead to shared condition and might put wrong/errorneous condition in the resource.

as threads are light-weight processes, hence we will be using threads and process interchangably.

so, we need to maintain mutual exclusion while doing multi-treading, this is our objective.

If one process is already in critical section, then no other process should be allowed there.

solution given by peterson:

let's say we have two processes, p0 and p1.
i represents the current process, so if i == 0 then p0 is our current process and similarly
if i == 1 then p1 is our current process.
similarly,
j represents the other process, so if j == 0 then p0 is our other process and if j == 1 then our other 
process is p1.
and we have a turn variable, turn is a bool variable, it can have value as either i or j, it determines
whose turn is it to access the critical section, and it's a shared variable.
we also have a flag[2] bool, if flag[0] is true then p0 wants to enter the critical section and if flag[1]
is true then p1 wants to enter the critical section. Initially both the flags are false.

now, 

for process p0:

flag[i] = true;                 // p0 made the intention of entering the critical section.
turn = j;                       // turn is passed on for p1 and
while (turn == j and flag[j]);  // now p0 is waiting for making p1 to make its intention clear, if p1 wants to enter the critical section
        CS
flag[i] = false;

for process p1:

flag[j] = true;                 // p0 made the intention of entering the critical section.
turn = i;                       // turn is passed on for p1 and
while (turn == i and flag[i]);  // now p0 is waiting for making p1 to make its intention clear, if p1 wants to enter the critical section
        CS
flag[j] = false;

the process which will make flag true first will get to enter CS first.

It indeed make CS mutually exclusive, let's talk about the parameters for confirming it -

1. mutual exclusion is ensured.
If p0 has entered the critical section, others can not.

2. there is progress.
If no one is in CS then if someone wants to enter the CS, then it should be allowed to enter.

3. there is bounded waiting.
No process should wait for infinite time.

as all these 3 parameters gets fulfilled hence this solution definetly works for 2 processes.
but it fails if we try it for k different processes.

that's because turn variable updation was an atomic process in case of two process, but to enable
this solution for k processes, turn processes need capability to keep k flags and hence that check
will no longer be an atomic as updation/verification of turn variable will become a multi step
instruction.
