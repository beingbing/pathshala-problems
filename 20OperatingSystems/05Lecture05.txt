~~ introduction to processes ~~

* operating systems: processes and process control block
(CPU virtualization)

how does OS able to make this illusion that every program is having its own CPU ?

process => a program in execution.

multiple programs available to be run
            |
            |
OS will select a program to run
            |
            |
convert it into a process
            |
            |
        give it CPU


if in between execution, OS decides to give the CPU to another process, then it swap out the currently
running process with the process it wants to execute. This phenomenon is called as context switching.

and this whole process, where OS is trying to give every process some time to run is called as time
sharing.

this two concepts working together gives us a feel of interactivity.


disadvantage -
- with context switch, we are losing some time which is spent only on the swapping process.
hence if there are two many process waiting to be run then time sharing can be disadvantageous as
it will give a lot of lag.



what is the data structure for storing details of a process ?

DS used for storing process details is called as process control block (PCB).

PCB contains -
- memory layout of our process
- registers: which stores current address, where the process is running. (on which line were we when
we swapped this process out, so that we can continue from there).
- metadata of process, like its ID, priority, parent process etc.


* memory layout -
- global/local variables used by the process.
- text (code compiled into macine code)
- data (that can be taken as soon as we start the process, and can be delete after process ends)
- stack space (statically allocated variables)
- heap space ( dynamically allocated variables)

Note: if stack and heap memory meets then it leads to MLE (memory limit exceeded) / segmentation fault.


* registers -
- program counter (PC): current statement number that we are executing.
This helps us a lot in context switching
- stack pointer (SP): it is there for every function till it is completely executed.
it stores the current activation record (the current line which was being executed in that function).
- frame pointer (FP): it stores the beginning of the current function (position in stack of our latest
function).
so that as soon as the current function ends everything from frame pointer and above can be removed.
it exists for every function.


* metadata -
- ID of the current process
- priority
- I/O status
- process status
- memory and any other limits
- ID of parent process
