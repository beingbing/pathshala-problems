~~ sorting in linear time ~~

given an array of n elements where every element belongs to [0, (n^2-1)]
sort the array in almost linear time

we should go with radix sort in given conditions.
need to choose a base b such that our time comlexity is almost linear.
so, if we choose b = n, then the TC becomes O(4n), which is what we wanted.

e.g. -
n = 11
99  75  90  6   24  56  77  90  22  5   40

convert them to base 11 notation

90  69  82  06  22  51  70  82  20  05  37

sort for lowest digit

90  70  20  51  82  22  82  05  06  37  69

sort for next higher digit

05  06  20  22  37  51  69  70  82  82  90

convert them back

5   6   22  24  40  55  75  77  90  90  99


code -

int cnt[n], aux[n]
for (i{0}; i<n) cnt[i] = 0
for (i{0}; i<n) cnt[a[i]%n]++
for (i{1}; i<n) cnt[i] += cnt[i-1]
for (i{n-1}; i>=0) {
    aux[cnt[a[i]%n]-1] = a[i]
    cnt[a[i]%n]--
}
for (i{0}; i<n) {
    a[i] = aux[i]
    cnt[i] = 0
}
for (i{0}; i<n) cnt[(a[i]%n)%n]++
for (i{1}; i<n) cnt[i] += cnt[i-1]
for (i{n-1}; i>=0) {
    aux[cnt[(a[i]%n)%n]-1] = a[i]
    cnt[(a[i]%n)%n]--
}
for (i{0}; i<n) a[i] = aux[i]