~~ Staircase Problem ~~

given number of stairs, we want to reach the top. we are allowed to make following moves -
- 1 unit jump
- 2 unit jump
count total number of distinct ways to reach the top.

// elements of choice - either consider an element or skip it.

to solve it, we need -
- optimal substructure (recurrence relation)
- find out overlaping problems.

recurrence relation germinates when we have got elements of choice (when we either include an element
or exclude an element).

f(i) = f(i+1) + f(i+2) // how many ways are there to go from ith stairs

top to bottom approach -

vector<long> ways(n+1, -1);

int totalWays(int i) {
    if (i > n) return 0;
    if (i == n) return 1;
    if (ways[i] != -1) return ways[i];
    ways[i] = totalWays(i+1) + totalWays(i+2);
    return ways[i];
}

TC = O(n)
SC = O(n)


f(i) = f(i-1) + f(i-2) // how many ways are there to reach ith stair from 0th stair.

vector<long> ways(n+1, -1);

int totalWays(int i) {
    if (i < 0) return 0;
    if (i == 0) return 1;
    if (ways[i] != -1) return ways[i];
    ways[i] = totalWays(i-1) + totalWays(i-2);
    return ways[i];
}


bottom to top -

int totalWays(int n) {
    if (n == 0) return 0;
    int f = 1, s = 2;
    if (n == 1) return f;
    for (i{3}; i<=n; i++) {
        int cur = f+s;
        f = s;
        s = cur;
    }
    return s;
}

TC = O(n)
SC = O(1)
