~~ top and bottom views of binary tree ~~

given a binary tree, print top view.

unordered_map<int, int> mp;
queue<pair<Node*, int>> q;
q.push({root, 0});
int mx = INT_MIN, mn = INT_MAX;
while (!q.empty()) {
    pair<Node*, int> p = q.front();
    q.pop();
    mx = max(mx, p.second);
    mn = min(mn, p.second);
    if (mp.find(p.second) == mp.end()) mp[p.second] = p.first->val;
    if (p.first->left) q.push({p.first->left, p.second - 1});
    if (p.first->right) q.push({p.first->right, p.second + 1});
}
for (i{mn}; i<=mx) cout << mp[i] << '\t';



given a binary tree, print bottom view.

unordered_map<int, int> mp;
queue<pair<Node*, int>> q;
q.push({root, 0});
int mx = INT_MIN, mn = INT_MAX;
while (!q.empty()) {
    pair<Node*, int> p = q.front();
    q.pop();
    mx = max(mx, p.second);
    mn = min(mn, p.second);
    mp[p.second] = p.first->val;
    if (p.first->left) q.push({p.first->left, p.second - 1});
    if (p.first->right) q.push({p.first->right, p.second + 1});
}
for (i{mn}; i<=mx) cout << mp[i] << '\t';
