~~ all possible binary trees - 2 ~~

In our last solution we were solving the same problem repeatedly, so for this we can keep a count[i]
which represents count of structurally different trees having i nodes.

here we are doing memoization for keeping track of trees with nodes count which we have previously
encountered.

vector<Node*> allPossibleTrees(int n) {
    vector<vector<Node*>> trees;
    trees.push_back({NULL});
    for (int i{1}; i<=n; i++) {
        vector<Node*> ans;
        for (int j{0}; j<i; j++) {
            vector<Node*> lst = trees[j];
            vector<Node*> rst = trees [i-1-j];
            for (int k{0}; k<lst.size(); k++) {
                for (int l{0}; l<rst.size(); l++) {
                    ans.push_back(new Node(0, lst[k], rst[l]));
                }
            }
        }
        trees.push_back(ans);
    }
    return trees[n];
}
