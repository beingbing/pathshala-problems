~~ level order traversal ~~

this is not a recursive pattern because recursion works by exploring depth

queue<Node*> q;
q.push(root);
while (!q.empty()) {
    Node* n = q.front();
    q.pop();
    cout << n->val << " ";
    if (n->left) q.push(n->left);
    if (n->right) q.push(n->right);
}

TC = O(N)
SC = O(width)



Q. print the nodes of next level in next line.

queue<pair<Node*, int>> q;
q.push({root, 0});
int cur = 0;
while (!q.empty()) {
    pair<Node*, int> p = q.front();
    q.pop();
    if (p.second > cur) {
        cur = p.second;
        cout << endl;
    }
    cout << p.first->val << " ";
    if (p.first->left) q.push({p.first->left, p.second+1});
    if (p.first->right) q.push({p.first->right, p.second+1});
}

can we do it without tracking level ?

queue<Node*> q;
q.push(root);
while (!q.empty()) {
    int sz = q.size();
    while (sz--) {
        Node* n = q.front();
        q.pop();
        cout << n->val << " ";
        if (n->left) q.push(n->left);
        if (n->right) q.push(n->right);
    }
    cout << endl;
}

Q. printing level order from right to left, what change will it bring ?
